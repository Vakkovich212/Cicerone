/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ElementRef, OnDestroy, NgZone, AfterContentInit } from '@angular/core';
import { Directionality } from '@angular/cdk/bidi';
import { BaseDirective2, StyleBuilder, StyleDefinition, StyleUtils, MediaMarshaller, ElementMatcher } from '@angular/flex-layout/core';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export interface LayoutGapParent {
    directionality: string;
    items: HTMLElement[];
    layout: string;
}
export declare class LayoutGapStyleBuilder extends StyleBuilder {
    private _styler;
    constructor(_styler: StyleUtils);
    buildStyles(gapValue: string, parent: LayoutGapParent): StyleDefinition;
    sideEffect(gapValue: string, _styles: StyleDefinition, parent: LayoutGapParent): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LayoutGapStyleBuilder>;
}
/**
 * 'layout-padding' styling directive
 *  Defines padding of child elements in a layout container
 */
export declare class LayoutGapDirective extends BaseDirective2 implements AfterContentInit, OnDestroy {
    protected zone: NgZone;
    protected directionality: Directionality;
    protected styleUtils: StyleUtils;
    protected layout: string;
    protected DIRECTIVE_KEY: string;
    protected observerSubject: Subject<void>;
    /** Special accessor to query for all child 'element' nodes regardless of type, class, etc */
    protected get childrenNodes(): HTMLElement[];
    constructor(elRef: ElementRef, zone: NgZone, directionality: Directionality, styleUtils: StyleUtils, styleBuilder: LayoutGapStyleBuilder, marshal: MediaMarshaller);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    /**
     * Cache the parent container 'flex-direction' and update the 'margin' styles
     */
    protected onLayoutChange(matcher: ElementMatcher): void;
    /**
     *
     */
    protected updateWithValue(value: string): void;
    /** We need to override clearStyles because in most cases mru isn't populated */
    protected clearStyles(): void;
    /** Determine if an element will show or hide based on current activation */
    protected willDisplay(source: HTMLElement): boolean;
    protected buildChildObservable(): void;
    protected observer?: MutationObserver;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LayoutGapDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LayoutGapDirective, never, never, {}, {}, never>;
}
export declare class DefaultLayoutGapDirective extends LayoutGapDirective {
    protected inputs: string[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DefaultLayoutGapDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DefaultLayoutGapDirective, "  [fxLayoutGap], [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md],  [fxLayoutGap.lg], [fxLayoutGap.xl], [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md],  [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl], [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm],  [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]", never, {
    "fxLayoutGap": "fxLayoutGap";
    "fxLayoutGap.xs": "fxLayoutGap.xs";
    "fxLayoutGap.sm": "fxLayoutGap.sm";
    "fxLayoutGap.md": "fxLayoutGap.md";
    "fxLayoutGap.lg": "fxLayoutGap.lg";
    "fxLayoutGap.xl": "fxLayoutGap.xl";
    "fxLayoutGap.lt-sm": "fxLayoutGap.lt-sm";
    "fxLayoutGap.lt-md": "fxLayoutGap.lt-md";
    "fxLayoutGap.lt-lg": "fxLayoutGap.lt-lg";
    "fxLayoutGap.lt-xl": "fxLayoutGap.lt-xl";
    "fxLayoutGap.gt-xs": "fxLayoutGap.gt-xs";
    "fxLayoutGap.gt-sm": "fxLayoutGap.gt-sm";
    "fxLayoutGap.gt-md": "fxLayoutGap.gt-md";
    "fxLayoutGap.gt-lg": "fxLayoutGap.gt-lg";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0LWdhcC5kLnRzIiwic291cmNlcyI6WyJsYXlvdXQtZ2FwLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7OztBQVdBOzs7Ozs7Ozs7OztBQVVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUErQkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBR0E7Iiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgeyBFbGVtZW50UmVmLCBPbkRlc3Ryb3ksIE5nWm9uZSwgQWZ0ZXJDb250ZW50SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGlyZWN0aW9uYWxpdHkgfSBmcm9tICdAYW5ndWxhci9jZGsvYmlkaSc7XG5pbXBvcnQgeyBCYXNlRGlyZWN0aXZlMiwgU3R5bGVCdWlsZGVyLCBTdHlsZURlZmluaXRpb24sIFN0eWxlVXRpbHMsIE1lZGlhTWFyc2hhbGxlciwgRWxlbWVudE1hdGNoZXIgfSBmcm9tICdAYW5ndWxhci9mbGV4LWxheW91dC9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmV4cG9ydCBpbnRlcmZhY2UgTGF5b3V0R2FwUGFyZW50IHtcbiAgICBkaXJlY3Rpb25hbGl0eTogc3RyaW5nO1xuICAgIGl0ZW1zOiBIVE1MRWxlbWVudFtdO1xuICAgIGxheW91dDogc3RyaW5nO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTGF5b3V0R2FwU3R5bGVCdWlsZGVyIGV4dGVuZHMgU3R5bGVCdWlsZGVyIHtcbiAgICBwcml2YXRlIF9zdHlsZXI7XG4gICAgY29uc3RydWN0b3IoX3N0eWxlcjogU3R5bGVVdGlscyk7XG4gICAgYnVpbGRTdHlsZXMoZ2FwVmFsdWU6IHN0cmluZywgcGFyZW50OiBMYXlvdXRHYXBQYXJlbnQpOiBTdHlsZURlZmluaXRpb247XG4gICAgc2lkZUVmZmVjdChnYXBWYWx1ZTogc3RyaW5nLCBfc3R5bGVzOiBTdHlsZURlZmluaXRpb24sIHBhcmVudDogTGF5b3V0R2FwUGFyZW50KTogdm9pZDtcbn1cbi8qKlxuICogJ2xheW91dC1wYWRkaW5nJyBzdHlsaW5nIGRpcmVjdGl2ZVxuICogIERlZmluZXMgcGFkZGluZyBvZiBjaGlsZCBlbGVtZW50cyBpbiBhIGxheW91dCBjb250YWluZXJcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTGF5b3V0R2FwRGlyZWN0aXZlIGV4dGVuZHMgQmFzZURpcmVjdGl2ZTIgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xuICAgIHByb3RlY3RlZCB6b25lOiBOZ1pvbmU7XG4gICAgcHJvdGVjdGVkIGRpcmVjdGlvbmFsaXR5OiBEaXJlY3Rpb25hbGl0eTtcbiAgICBwcm90ZWN0ZWQgc3R5bGVVdGlsczogU3R5bGVVdGlscztcbiAgICBwcm90ZWN0ZWQgbGF5b3V0OiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIERJUkVDVElWRV9LRVk6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgb2JzZXJ2ZXJTdWJqZWN0OiBTdWJqZWN0PHZvaWQ+O1xuICAgIC8qKiBTcGVjaWFsIGFjY2Vzc29yIHRvIHF1ZXJ5IGZvciBhbGwgY2hpbGQgJ2VsZW1lbnQnIG5vZGVzIHJlZ2FyZGxlc3Mgb2YgdHlwZSwgY2xhc3MsIGV0YyAqL1xuICAgIHByb3RlY3RlZCBnZXQgY2hpbGRyZW5Ob2RlcygpOiBIVE1MRWxlbWVudFtdO1xuICAgIGNvbnN0cnVjdG9yKGVsUmVmOiBFbGVtZW50UmVmLCB6b25lOiBOZ1pvbmUsIGRpcmVjdGlvbmFsaXR5OiBEaXJlY3Rpb25hbGl0eSwgc3R5bGVVdGlsczogU3R5bGVVdGlscywgc3R5bGVCdWlsZGVyOiBMYXlvdXRHYXBTdHlsZUJ1aWxkZXIsIG1hcnNoYWw6IE1lZGlhTWFyc2hhbGxlcik7XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDYWNoZSB0aGUgcGFyZW50IGNvbnRhaW5lciAnZmxleC1kaXJlY3Rpb24nIGFuZCB1cGRhdGUgdGhlICdtYXJnaW4nIHN0eWxlc1xuICAgICAqL1xuICAgIHByb3RlY3RlZCBvbkxheW91dENoYW5nZShtYXRjaGVyOiBFbGVtZW50TWF0Y2hlcik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgdXBkYXRlV2l0aFZhbHVlKHZhbHVlOiBzdHJpbmcpOiB2b2lkO1xuICAgIC8qKiBXZSBuZWVkIHRvIG92ZXJyaWRlIGNsZWFyU3R5bGVzIGJlY2F1c2UgaW4gbW9zdCBjYXNlcyBtcnUgaXNuJ3QgcG9wdWxhdGVkICovXG4gICAgcHJvdGVjdGVkIGNsZWFyU3R5bGVzKCk6IHZvaWQ7XG4gICAgLyoqIERldGVybWluZSBpZiBhbiBlbGVtZW50IHdpbGwgc2hvdyBvciBoaWRlIGJhc2VkIG9uIGN1cnJlbnQgYWN0aXZhdGlvbiAqL1xuICAgIHByb3RlY3RlZCB3aWxsRGlzcGxheShzb3VyY2U6IEhUTUxFbGVtZW50KTogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgYnVpbGRDaGlsZE9ic2VydmFibGUoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgb2JzZXJ2ZXI/OiBNdXRhdGlvbk9ic2VydmVyO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRGVmYXVsdExheW91dEdhcERpcmVjdGl2ZSBleHRlbmRzIExheW91dEdhcERpcmVjdGl2ZSB7XG4gICAgcHJvdGVjdGVkIGlucHV0czogc3RyaW5nW107XG59XG4iXX0=