import { EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { FormControl, ValidatorFn } from '@angular/forms';
import { Criteria } from '../../enum/criteria.enum';
import { MatPasswordStrengthValidator } from '../../validator/mat-password-strength-validator';
import { ThemePalette } from '@angular/material/core';
import * as ɵngcc0 from '@angular/core';
export declare class MatPasswordStrengthComponent implements OnInit, OnChanges {
    password: string;
    externalError: boolean;
    enableLengthRule: boolean;
    enableLowerCaseLetterRule: boolean;
    enableUpperCaseLetterRule: boolean;
    enableDigitRule: boolean;
    enableSpecialCharRule: boolean;
    min: number;
    max: number;
    customValidator: RegExp;
    warnThreshold: number;
    accentThreshold: number;
    onStrengthChanged: EventEmitter<number>;
    criteriaMap: Map<Criteria, RegExp>;
    containAtLeastMinChars: boolean;
    containAtLeastOneLowerCaseLetter: boolean;
    containAtLeastOneUpperCaseLetter: boolean;
    containAtLeastOneDigit: boolean;
    containAtLeastOneSpecialChar: boolean;
    containAtCustomChars: boolean;
    passwordFormControl: FormControl;
    passwordConfirmationFormControl: FormControl;
    validatorsArray: ValidatorFn[];
    private _strength;
    private _color;
    Validators: ValidatorFn;
    matPasswordStrengthValidator: MatPasswordStrengthValidator;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    get strength(): number;
    get color(): ThemePalette;
    private _containAtLeastMinChars;
    private _containAtLeastOneLowerCaseLetter;
    private _containAtLeastOneUpperCaseLetter;
    private _containAtLeastOneDigit;
    private _containAtLeastOneSpecialChar;
    private _containCustomChars;
    parseCustomValidatorsRegex(value?: string | RegExp): RegExp;
    setRulesAndValidators(): void;
    calculatePasswordStrength(): void;
    reset(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MatPasswordStrengthComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MatPasswordStrengthComponent, "mat-password-strength", ["matPasswordStrength"], {
    "enableLengthRule": "enableLengthRule";
    "enableLowerCaseLetterRule": "enableLowerCaseLetterRule";
    "enableUpperCaseLetterRule": "enableUpperCaseLetterRule";
    "enableDigitRule": "enableDigitRule";
    "enableSpecialCharRule": "enableSpecialCharRule";
    "min": "min";
    "max": "max";
    "warnThreshold": "warnThreshold";
    "accentThreshold": "accentThreshold";
    "password": "password";
    "externalError": "externalError";
    "customValidator": "customValidator";
}, {
    "onStrengthChanged": "onStrengthChanged";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXBhc3N3b3JkLXN0cmVuZ3RoLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJtYXQtcGFzc3dvcmQtc3RyZW5ndGguY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUtBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBDQTsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgT25Jbml0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtQ29udHJvbCwgVmFsaWRhdG9yRm4gfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBDcml0ZXJpYSB9IGZyb20gJy4uLy4uL2VudW0vY3JpdGVyaWEuZW51bSc7XG5pbXBvcnQgeyBNYXRQYXNzd29yZFN0cmVuZ3RoVmFsaWRhdG9yIH0gZnJvbSAnLi4vLi4vdmFsaWRhdG9yL21hdC1wYXNzd29yZC1zdHJlbmd0aC12YWxpZGF0b3InO1xuaW1wb3J0IHsgVGhlbWVQYWxldHRlIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvY29yZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBNYXRQYXNzd29yZFN0cmVuZ3RoQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuICAgIHBhc3N3b3JkOiBzdHJpbmc7XG4gICAgZXh0ZXJuYWxFcnJvcjogYm9vbGVhbjtcbiAgICBlbmFibGVMZW5ndGhSdWxlOiBib29sZWFuO1xuICAgIGVuYWJsZUxvd2VyQ2FzZUxldHRlclJ1bGU6IGJvb2xlYW47XG4gICAgZW5hYmxlVXBwZXJDYXNlTGV0dGVyUnVsZTogYm9vbGVhbjtcbiAgICBlbmFibGVEaWdpdFJ1bGU6IGJvb2xlYW47XG4gICAgZW5hYmxlU3BlY2lhbENoYXJSdWxlOiBib29sZWFuO1xuICAgIG1pbjogbnVtYmVyO1xuICAgIG1heDogbnVtYmVyO1xuICAgIGN1c3RvbVZhbGlkYXRvcjogUmVnRXhwO1xuICAgIHdhcm5UaHJlc2hvbGQ6IG51bWJlcjtcbiAgICBhY2NlbnRUaHJlc2hvbGQ6IG51bWJlcjtcbiAgICBvblN0cmVuZ3RoQ2hhbmdlZDogRXZlbnRFbWl0dGVyPG51bWJlcj47XG4gICAgY3JpdGVyaWFNYXA6IE1hcDxDcml0ZXJpYSwgUmVnRXhwPjtcbiAgICBjb250YWluQXRMZWFzdE1pbkNoYXJzOiBib29sZWFuO1xuICAgIGNvbnRhaW5BdExlYXN0T25lTG93ZXJDYXNlTGV0dGVyOiBib29sZWFuO1xuICAgIGNvbnRhaW5BdExlYXN0T25lVXBwZXJDYXNlTGV0dGVyOiBib29sZWFuO1xuICAgIGNvbnRhaW5BdExlYXN0T25lRGlnaXQ6IGJvb2xlYW47XG4gICAgY29udGFpbkF0TGVhc3RPbmVTcGVjaWFsQ2hhcjogYm9vbGVhbjtcbiAgICBjb250YWluQXRDdXN0b21DaGFyczogYm9vbGVhbjtcbiAgICBwYXNzd29yZEZvcm1Db250cm9sOiBGb3JtQ29udHJvbDtcbiAgICBwYXNzd29yZENvbmZpcm1hdGlvbkZvcm1Db250cm9sOiBGb3JtQ29udHJvbDtcbiAgICB2YWxpZGF0b3JzQXJyYXk6IFZhbGlkYXRvckZuW107XG4gICAgcHJpdmF0ZSBfc3RyZW5ndGg7XG4gICAgcHJpdmF0ZSBfY29sb3I7XG4gICAgVmFsaWRhdG9yczogVmFsaWRhdG9yRm47XG4gICAgbWF0UGFzc3dvcmRTdHJlbmd0aFZhbGlkYXRvcjogTWF0UGFzc3dvcmRTdHJlbmd0aFZhbGlkYXRvcjtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIGdldCBzdHJlbmd0aCgpOiBudW1iZXI7XG4gICAgZ2V0IGNvbG9yKCk6IFRoZW1lUGFsZXR0ZTtcbiAgICBwcml2YXRlIF9jb250YWluQXRMZWFzdE1pbkNoYXJzO1xuICAgIHByaXZhdGUgX2NvbnRhaW5BdExlYXN0T25lTG93ZXJDYXNlTGV0dGVyO1xuICAgIHByaXZhdGUgX2NvbnRhaW5BdExlYXN0T25lVXBwZXJDYXNlTGV0dGVyO1xuICAgIHByaXZhdGUgX2NvbnRhaW5BdExlYXN0T25lRGlnaXQ7XG4gICAgcHJpdmF0ZSBfY29udGFpbkF0TGVhc3RPbmVTcGVjaWFsQ2hhcjtcbiAgICBwcml2YXRlIF9jb250YWluQ3VzdG9tQ2hhcnM7XG4gICAgcGFyc2VDdXN0b21WYWxpZGF0b3JzUmVnZXgodmFsdWU/OiBzdHJpbmcgfCBSZWdFeHApOiBSZWdFeHA7XG4gICAgc2V0UnVsZXNBbmRWYWxpZGF0b3JzKCk6IHZvaWQ7XG4gICAgY2FsY3VsYXRlUGFzc3dvcmRTdHJlbmd0aCgpOiB2b2lkO1xuICAgIHJlc2V0KCk6IHZvaWQ7XG59XG4iXX0=