/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ElementRef } from '@angular/core';
import { BaseDirective2, LayoutConfigOptions, StyleUtils, StyleBuilder, StyleDefinition, MediaMarshaller, ElementMatcher } from '@angular/flex-layout/core';
import * as ɵngcc0 from '@angular/core';
interface FlexBuilderParent {
    direction: string;
    hasWrap: boolean;
}
export declare class FlexStyleBuilder extends StyleBuilder {
    protected layoutConfig: LayoutConfigOptions;
    constructor(layoutConfig: LayoutConfigOptions);
    buildStyles(input: string, parent: FlexBuilderParent): StyleDefinition;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FlexStyleBuilder>;
}
/**
 * Directive to control the size of a flex item using flex-basis, flex-grow, and flex-shrink.
 * Corresponds to the css `flex` shorthand property.
 *
 * @see https://css-tricks.com/snippets/css/a-guide-to-flexbox/
 */
export declare class FlexDirective extends BaseDirective2 {
    protected layoutConfig: LayoutConfigOptions;
    protected DIRECTIVE_KEY: string;
    protected direction: string;
    protected wrap: boolean;
    get shrink(): string;
    set shrink(value: string);
    get grow(): string;
    set grow(value: string);
    protected flexGrow: string;
    protected flexShrink: string;
    constructor(elRef: ElementRef, styleUtils: StyleUtils, layoutConfig: LayoutConfigOptions, styleBuilder: FlexStyleBuilder, marshal: MediaMarshaller);
    /**
     * Caches the parent container's 'flex-direction' and updates the element's style.
     * Used as a handler for layout change events from the parent flex container.
     */
    protected onLayoutChange(matcher: ElementMatcher): void;
    /** Input to this is exclusively the basis input value */
    protected updateWithValue(value: string): void;
    /** Trigger a style reflow, usually based on a shrink/grow input event */
    protected triggerReflow(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FlexDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<FlexDirective, never, never, {
    "shrink": "fxShrink";
    "grow": "fxGrow";
}, {}, never>;
}
export declare class DefaultFlexDirective extends FlexDirective {
    protected inputs: string[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DefaultFlexDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DefaultFlexDirective, "  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]", never, {
    "fxFlex": "fxFlex";
    "fxFlex.xs": "fxFlex.xs";
    "fxFlex.sm": "fxFlex.sm";
    "fxFlex.md": "fxFlex.md";
    "fxFlex.lg": "fxFlex.lg";
    "fxFlex.xl": "fxFlex.xl";
    "fxFlex.lt-sm": "fxFlex.lt-sm";
    "fxFlex.lt-md": "fxFlex.lt-md";
    "fxFlex.lt-lg": "fxFlex.lt-lg";
    "fxFlex.lt-xl": "fxFlex.lt-xl";
    "fxFlex.gt-xs": "fxFlex.gt-xs";
    "fxFlex.gt-sm": "fxFlex.gt-sm";
    "fxFlex.gt-md": "fxFlex.gt-md";
    "fxFlex.gt-lg": "fxFlex.gt-lg";
}, {}, never>;
}
export {};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxleC5kLnRzIiwic291cmNlcyI6WyJmbGV4LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7QUFTQTs7Ozs7Ozs7O0FBUUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTRCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFHQTs7Iiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgeyBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCYXNlRGlyZWN0aXZlMiwgTGF5b3V0Q29uZmlnT3B0aW9ucywgU3R5bGVVdGlscywgU3R5bGVCdWlsZGVyLCBTdHlsZURlZmluaXRpb24sIE1lZGlhTWFyc2hhbGxlciwgRWxlbWVudE1hdGNoZXIgfSBmcm9tICdAYW5ndWxhci9mbGV4LWxheW91dC9jb3JlJztcbmludGVyZmFjZSBGbGV4QnVpbGRlclBhcmVudCB7XG4gICAgZGlyZWN0aW9uOiBzdHJpbmc7XG4gICAgaGFzV3JhcDogYm9vbGVhbjtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEZsZXhTdHlsZUJ1aWxkZXIgZXh0ZW5kcyBTdHlsZUJ1aWxkZXIge1xuICAgIHByb3RlY3RlZCBsYXlvdXRDb25maWc6IExheW91dENvbmZpZ09wdGlvbnM7XG4gICAgY29uc3RydWN0b3IobGF5b3V0Q29uZmlnOiBMYXlvdXRDb25maWdPcHRpb25zKTtcbiAgICBidWlsZFN0eWxlcyhpbnB1dDogc3RyaW5nLCBwYXJlbnQ6IEZsZXhCdWlsZGVyUGFyZW50KTogU3R5bGVEZWZpbml0aW9uO1xufVxuLyoqXG4gKiBEaXJlY3RpdmUgdG8gY29udHJvbCB0aGUgc2l6ZSBvZiBhIGZsZXggaXRlbSB1c2luZyBmbGV4LWJhc2lzLCBmbGV4LWdyb3csIGFuZCBmbGV4LXNocmluay5cbiAqIENvcnJlc3BvbmRzIHRvIHRoZSBjc3MgYGZsZXhgIHNob3J0aGFuZCBwcm9wZXJ0eS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vc25pcHBldHMvY3NzL2EtZ3VpZGUtdG8tZmxleGJveC9cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRmxleERpcmVjdGl2ZSBleHRlbmRzIEJhc2VEaXJlY3RpdmUyIHtcbiAgICBwcm90ZWN0ZWQgbGF5b3V0Q29uZmlnOiBMYXlvdXRDb25maWdPcHRpb25zO1xuICAgIHByb3RlY3RlZCBESVJFQ1RJVkVfS0VZOiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIGRpcmVjdGlvbjogc3RyaW5nO1xuICAgIHByb3RlY3RlZCB3cmFwOiBib29sZWFuO1xuICAgIGdldCBzaHJpbmsoKTogc3RyaW5nO1xuICAgIHNldCBzaHJpbmsodmFsdWU6IHN0cmluZyk7XG4gICAgZ2V0IGdyb3coKTogc3RyaW5nO1xuICAgIHNldCBncm93KHZhbHVlOiBzdHJpbmcpO1xuICAgIHByb3RlY3RlZCBmbGV4R3Jvdzogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBmbGV4U2hyaW5rOiBzdHJpbmc7XG4gICAgY29uc3RydWN0b3IoZWxSZWY6IEVsZW1lbnRSZWYsIHN0eWxlVXRpbHM6IFN0eWxlVXRpbHMsIGxheW91dENvbmZpZzogTGF5b3V0Q29uZmlnT3B0aW9ucywgc3R5bGVCdWlsZGVyOiBGbGV4U3R5bGVCdWlsZGVyLCBtYXJzaGFsOiBNZWRpYU1hcnNoYWxsZXIpO1xuICAgIC8qKlxuICAgICAqIENhY2hlcyB0aGUgcGFyZW50IGNvbnRhaW5lcidzICdmbGV4LWRpcmVjdGlvbicgYW5kIHVwZGF0ZXMgdGhlIGVsZW1lbnQncyBzdHlsZS5cbiAgICAgKiBVc2VkIGFzIGEgaGFuZGxlciBmb3IgbGF5b3V0IGNoYW5nZSBldmVudHMgZnJvbSB0aGUgcGFyZW50IGZsZXggY29udGFpbmVyLlxuICAgICAqL1xuICAgIHByb3RlY3RlZCBvbkxheW91dENoYW5nZShtYXRjaGVyOiBFbGVtZW50TWF0Y2hlcik6IHZvaWQ7XG4gICAgLyoqIElucHV0IHRvIHRoaXMgaXMgZXhjbHVzaXZlbHkgdGhlIGJhc2lzIGlucHV0IHZhbHVlICovXG4gICAgcHJvdGVjdGVkIHVwZGF0ZVdpdGhWYWx1ZSh2YWx1ZTogc3RyaW5nKTogdm9pZDtcbiAgICAvKiogVHJpZ2dlciBhIHN0eWxlIHJlZmxvdywgdXN1YWxseSBiYXNlZCBvbiBhIHNocmluay9ncm93IGlucHV0IGV2ZW50ICovXG4gICAgcHJvdGVjdGVkIHRyaWdnZXJSZWZsb3coKTogdm9pZDtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERlZmF1bHRGbGV4RGlyZWN0aXZlIGV4dGVuZHMgRmxleERpcmVjdGl2ZSB7XG4gICAgcHJvdGVjdGVkIGlucHV0czogc3RyaW5nW107XG59XG5leHBvcnQge307XG4iXX0=