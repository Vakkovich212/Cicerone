import { AfterViewInit, ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { AbstractControl, FormGroup } from '@angular/forms';
import { MatTabChangeEvent, MatTabGroup } from '@angular/material/tabs';
import { ThemePalette } from '@angular/material/core';
import { MatDialog, MatDialogRef } from '@angular/material/dialog';
import { MatFormFieldAppearance } from '@angular/material/form-field';
import { AngularFireAuth } from '@angular/fire/auth';
import { MatPasswordStrengthComponent } from '@angular-material-extensions/password-strength';
import { Subscription } from 'rxjs/internal/Subscription';
import { LegalityDialogComponent, Theme } from '..';
import { NgxAuthFirebaseUIConfig } from '../../interfaces';
import { AuthProcessService, AuthProvider } from '../../services';
import * as ɵngcc0 from '@angular/core';
export declare const EMAIL_REGEX: RegExp;
export declare const PHONE_NUMBER_REGEX: RegExp;
export declare class AuthComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {
    private platformId;
    config: NgxAuthFirebaseUIConfig;
    auth: AngularFireAuth;
    authProcess: AuthProcessService;
    dialog: MatDialog;
    private activatedRoute;
    private changeDetectorRef;
    matTabGroup: MatTabGroup;
    passwordStrength: MatPasswordStrengthComponent;
    isLoading: boolean;
    providers: AuthProvider[] | AuthProvider;
    providersTheme: Theme;
    appearance: MatFormFieldAppearance;
    tabIndex: number | null;
    registrationEnabled: boolean;
    resetPasswordEnabled: boolean;
    guestEnabled: boolean;
    tosUrl: string;
    privacyPolicyUrl: string;
    goBackURL: string;
    messageOnAuthSuccess: string;
    messageOnAuthError: string;
    messageOnEmailConfirmationSuccess: string;
    onSuccess: any;
    onError: any;
    selectedTabChange: EventEmitter<MatTabChangeEvent>;
    enableLengthRule: boolean;
    enableLowerCaseLetterRule: boolean;
    enableUpperCaseLetterRule: boolean;
    enableDigitRule: boolean;
    enableSpecialCharRule: boolean;
    min: number;
    max: number;
    customValidator: RegExp;
    onStrengthChanged: EventEmitter<number>;
    verifyEmailTemplate: TemplateRef<any>;
    verifyEmailTitleText: string;
    verifyEmailConfirmationText: string;
    verifyEmailGoBackText: string;
    sendNewVerificationEmailText: string;
    signOutText: string;
    resetPasswordTabText: string;
    resetPasswordInputText: string;
    resetPasswordErrorRequiredText: string;
    resetPasswordErrorPatternText: string;
    resetPasswordActionButtonText: string;
    resetPasswordInstructionsText: string;
    signInTabText: string;
    signInCardTitleText: string;
    loginButtonText: string;
    forgotPasswordButtonText: string;
    nameText: string;
    nameErrorRequiredText: string;
    nameErrorMinLengthText: string;
    nameErrorMaxLengthText: string;
    emailText: string;
    emailErrorRequiredText: string;
    emailErrorPatternText: string;
    passwordText: string;
    passwordErrorRequiredText: string;
    passwordErrorMinLengthText: string;
    passwordErrorMaxLengthText: string;
    registerTabText: string;
    registerCardTitleText: string;
    registerButtonText: string;
    guestButtonText: string;
    emailConfirmationTitle: string;
    emailConfirmationText: string;
    authProvider: typeof AuthProvider;
    passwordResetWished: boolean;
    signInFormGroup: FormGroup;
    signUpFormGroup: FormGroup;
    resetPasswordFormGroup: FormGroup;
    onErrorSubscription: Subscription;
    authenticationError: boolean;
    passReset: boolean;
    dialogRef: MatDialogRef<LegalityDialogComponent>;
    authProviders: typeof AuthProvider;
    signInEmailFormControl: AbstractControl;
    sigInPasswordFormControl: AbstractControl;
    sigUpNameFormControl: AbstractControl;
    sigUpEmailFormControl: AbstractControl;
    sigUpPasswordFormControl: AbstractControl;
    sigUpPasswordConfirmationFormControl: AbstractControl;
    resetPasswordEmailFormControl: AbstractControl;
    constructor(platformId: Object, config: NgxAuthFirebaseUIConfig, auth: AngularFireAuth, authProcess: AuthProcessService, dialog: MatDialog, activatedRoute: ActivatedRoute, changeDetectorRef: ChangeDetectorRef);
    get color(): string | ThemePalette;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    onTabChange(event: MatTabChangeEvent): void;
    signOut(): Promise<void>;
    signIn(): Promise<void>;
    updateAuthSnackbarMessages(): void;
    createForgotPasswordTab(): void;
    processLegalSignUP(authProvider?: AuthProvider): void;
    signUp(): Promise<void>;
    signUpAnonymously(): Promise<void>;
    resetPassword(): void;
    private chooseBackUrl;
    private _initSignInFormGroupBuilder;
    private _initSignUpFormGroupBuilder;
    private _initResetPasswordFormGroupBuilder;
    private _afterSignUpMiddleware;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AuthComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AuthComponent, "ngx-auth-firebaseui", never, {
    "providers": "providers";
    "registrationEnabled": "registrationEnabled";
    "resetPasswordEnabled": "resetPasswordEnabled";
    "guestEnabled": "guestEnabled";
    "enableLengthRule": "enableLengthRule";
    "enableLowerCaseLetterRule": "enableLowerCaseLetterRule";
    "enableUpperCaseLetterRule": "enableUpperCaseLetterRule";
    "enableDigitRule": "enableDigitRule";
    "enableSpecialCharRule": "enableSpecialCharRule";
    "resetPasswordTabText": "resetPasswordTabText";
    "resetPasswordInputText": "resetPasswordInputText";
    "resetPasswordErrorRequiredText": "resetPasswordErrorRequiredText";
    "resetPasswordErrorPatternText": "resetPasswordErrorPatternText";
    "resetPasswordActionButtonText": "resetPasswordActionButtonText";
    "resetPasswordInstructionsText": "resetPasswordInstructionsText";
    "signInTabText": "signInTabText";
    "signInCardTitleText": "signInCardTitleText";
    "loginButtonText": "loginButtonText";
    "forgotPasswordButtonText": "forgotPasswordButtonText";
    "nameText": "nameText";
    "nameErrorRequiredText": "nameErrorRequiredText";
    "nameErrorMinLengthText": "nameErrorMinLengthText";
    "nameErrorMaxLengthText": "nameErrorMaxLengthText";
    "emailText": "emailText";
    "emailErrorRequiredText": "emailErrorRequiredText";
    "emailErrorPatternText": "emailErrorPatternText";
    "passwordText": "passwordText";
    "passwordErrorRequiredText": "passwordErrorRequiredText";
    "passwordErrorMinLengthText": "passwordErrorMinLengthText";
    "passwordErrorMaxLengthText": "passwordErrorMaxLengthText";
    "registerTabText": "registerTabText";
    "registerCardTitleText": "registerCardTitleText";
    "registerButtonText": "registerButtonText";
    "guestButtonText": "guestButtonText";
    "emailConfirmationTitle": "emailConfirmationTitle";
    "emailConfirmationText": "emailConfirmationText";
    "min": "min";
    "max": "max";
    "goBackURL": "goBackURL";
    "tabIndex": "tabIndex";
    "providersTheme": "providersTheme";
    "appearance": "appearance";
    "tosUrl": "tosUrl";
    "privacyPolicyUrl": "privacyPolicyUrl";
    "messageOnAuthSuccess": "messageOnAuthSuccess";
    "messageOnAuthError": "messageOnAuthError";
    "messageOnEmailConfirmationSuccess": "messageOnEmailConfirmationSuccess";
    "customValidator": "customValidator";
    "verifyEmailTemplate": "verifyEmailTemplate";
    "verifyEmailTitleText": "verifyEmailTitleText";
    "verifyEmailConfirmationText": "verifyEmailConfirmationText";
    "verifyEmailGoBackText": "verifyEmailGoBackText";
    "sendNewVerificationEmailText": "sendNewVerificationEmailText";
    "signOutText": "signOutText";
}, {
    "selectedTabChange": "selectedTabChange";
    "onStrengthChanged": "onStrengthChanged";
    "onSuccess": "onSuccess";
    "onError": "onError";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiYXV0aC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7QUFhQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE0R0E7Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcywgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgTWF0VGFiQ2hhbmdlRXZlbnQsIE1hdFRhYkdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvdGFicyc7XG5pbXBvcnQgeyBUaGVtZVBhbGV0dGUgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9jb3JlJztcbmltcG9ydCB7IE1hdERpYWxvZywgTWF0RGlhbG9nUmVmIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvZGlhbG9nJztcbmltcG9ydCB7IE1hdEZvcm1GaWVsZEFwcGVhcmFuY2UgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9mb3JtLWZpZWxkJztcbmltcG9ydCB7IEFuZ3VsYXJGaXJlQXV0aCB9IGZyb20gJ0Bhbmd1bGFyL2ZpcmUvYXV0aCc7XG5pbXBvcnQgeyBNYXRQYXNzd29yZFN0cmVuZ3RoQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXItbWF0ZXJpYWwtZXh0ZW5zaW9ucy9wYXNzd29yZC1zdHJlbmd0aCc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzL2ludGVybmFsL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBMZWdhbGl0eURpYWxvZ0NvbXBvbmVudCwgVGhlbWUgfSBmcm9tICcuLic7XG5pbXBvcnQgeyBOZ3hBdXRoRmlyZWJhc2VVSUNvbmZpZyB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgQXV0aFByb2Nlc3NTZXJ2aWNlLCBBdXRoUHJvdmlkZXIgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcyc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBFTUFJTF9SRUdFWDogUmVnRXhwO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgUEhPTkVfTlVNQkVSX1JFR0VYOiBSZWdFeHA7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBdXRoQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBwbGF0Zm9ybUlkO1xuICAgIGNvbmZpZzogTmd4QXV0aEZpcmViYXNlVUlDb25maWc7XG4gICAgYXV0aDogQW5ndWxhckZpcmVBdXRoO1xuICAgIGF1dGhQcm9jZXNzOiBBdXRoUHJvY2Vzc1NlcnZpY2U7XG4gICAgZGlhbG9nOiBNYXREaWFsb2c7XG4gICAgcHJpdmF0ZSBhY3RpdmF0ZWRSb3V0ZTtcbiAgICBwcml2YXRlIGNoYW5nZURldGVjdG9yUmVmO1xuICAgIG1hdFRhYkdyb3VwOiBNYXRUYWJHcm91cDtcbiAgICBwYXNzd29yZFN0cmVuZ3RoOiBNYXRQYXNzd29yZFN0cmVuZ3RoQ29tcG9uZW50O1xuICAgIGlzTG9hZGluZzogYm9vbGVhbjtcbiAgICBwcm92aWRlcnM6IEF1dGhQcm92aWRlcltdIHwgQXV0aFByb3ZpZGVyO1xuICAgIHByb3ZpZGVyc1RoZW1lOiBUaGVtZTtcbiAgICBhcHBlYXJhbmNlOiBNYXRGb3JtRmllbGRBcHBlYXJhbmNlO1xuICAgIHRhYkluZGV4OiBudW1iZXIgfCBudWxsO1xuICAgIHJlZ2lzdHJhdGlvbkVuYWJsZWQ6IGJvb2xlYW47XG4gICAgcmVzZXRQYXNzd29yZEVuYWJsZWQ6IGJvb2xlYW47XG4gICAgZ3Vlc3RFbmFibGVkOiBib29sZWFuO1xuICAgIHRvc1VybDogc3RyaW5nO1xuICAgIHByaXZhY3lQb2xpY3lVcmw6IHN0cmluZztcbiAgICBnb0JhY2tVUkw6IHN0cmluZztcbiAgICBtZXNzYWdlT25BdXRoU3VjY2Vzczogc3RyaW5nO1xuICAgIG1lc3NhZ2VPbkF1dGhFcnJvcjogc3RyaW5nO1xuICAgIG1lc3NhZ2VPbkVtYWlsQ29uZmlybWF0aW9uU3VjY2Vzczogc3RyaW5nO1xuICAgIG9uU3VjY2VzczogYW55O1xuICAgIG9uRXJyb3I6IGFueTtcbiAgICBzZWxlY3RlZFRhYkNoYW5nZTogRXZlbnRFbWl0dGVyPE1hdFRhYkNoYW5nZUV2ZW50PjtcbiAgICBlbmFibGVMZW5ndGhSdWxlOiBib29sZWFuO1xuICAgIGVuYWJsZUxvd2VyQ2FzZUxldHRlclJ1bGU6IGJvb2xlYW47XG4gICAgZW5hYmxlVXBwZXJDYXNlTGV0dGVyUnVsZTogYm9vbGVhbjtcbiAgICBlbmFibGVEaWdpdFJ1bGU6IGJvb2xlYW47XG4gICAgZW5hYmxlU3BlY2lhbENoYXJSdWxlOiBib29sZWFuO1xuICAgIG1pbjogbnVtYmVyO1xuICAgIG1heDogbnVtYmVyO1xuICAgIGN1c3RvbVZhbGlkYXRvcjogUmVnRXhwO1xuICAgIG9uU3RyZW5ndGhDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8bnVtYmVyPjtcbiAgICB2ZXJpZnlFbWFpbFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIHZlcmlmeUVtYWlsVGl0bGVUZXh0OiBzdHJpbmc7XG4gICAgdmVyaWZ5RW1haWxDb25maXJtYXRpb25UZXh0OiBzdHJpbmc7XG4gICAgdmVyaWZ5RW1haWxHb0JhY2tUZXh0OiBzdHJpbmc7XG4gICAgc2VuZE5ld1ZlcmlmaWNhdGlvbkVtYWlsVGV4dDogc3RyaW5nO1xuICAgIHNpZ25PdXRUZXh0OiBzdHJpbmc7XG4gICAgcmVzZXRQYXNzd29yZFRhYlRleHQ6IHN0cmluZztcbiAgICByZXNldFBhc3N3b3JkSW5wdXRUZXh0OiBzdHJpbmc7XG4gICAgcmVzZXRQYXNzd29yZEVycm9yUmVxdWlyZWRUZXh0OiBzdHJpbmc7XG4gICAgcmVzZXRQYXNzd29yZEVycm9yUGF0dGVyblRleHQ6IHN0cmluZztcbiAgICByZXNldFBhc3N3b3JkQWN0aW9uQnV0dG9uVGV4dDogc3RyaW5nO1xuICAgIHJlc2V0UGFzc3dvcmRJbnN0cnVjdGlvbnNUZXh0OiBzdHJpbmc7XG4gICAgc2lnbkluVGFiVGV4dDogc3RyaW5nO1xuICAgIHNpZ25JbkNhcmRUaXRsZVRleHQ6IHN0cmluZztcbiAgICBsb2dpbkJ1dHRvblRleHQ6IHN0cmluZztcbiAgICBmb3Jnb3RQYXNzd29yZEJ1dHRvblRleHQ6IHN0cmluZztcbiAgICBuYW1lVGV4dDogc3RyaW5nO1xuICAgIG5hbWVFcnJvclJlcXVpcmVkVGV4dDogc3RyaW5nO1xuICAgIG5hbWVFcnJvck1pbkxlbmd0aFRleHQ6IHN0cmluZztcbiAgICBuYW1lRXJyb3JNYXhMZW5ndGhUZXh0OiBzdHJpbmc7XG4gICAgZW1haWxUZXh0OiBzdHJpbmc7XG4gICAgZW1haWxFcnJvclJlcXVpcmVkVGV4dDogc3RyaW5nO1xuICAgIGVtYWlsRXJyb3JQYXR0ZXJuVGV4dDogc3RyaW5nO1xuICAgIHBhc3N3b3JkVGV4dDogc3RyaW5nO1xuICAgIHBhc3N3b3JkRXJyb3JSZXF1aXJlZFRleHQ6IHN0cmluZztcbiAgICBwYXNzd29yZEVycm9yTWluTGVuZ3RoVGV4dDogc3RyaW5nO1xuICAgIHBhc3N3b3JkRXJyb3JNYXhMZW5ndGhUZXh0OiBzdHJpbmc7XG4gICAgcmVnaXN0ZXJUYWJUZXh0OiBzdHJpbmc7XG4gICAgcmVnaXN0ZXJDYXJkVGl0bGVUZXh0OiBzdHJpbmc7XG4gICAgcmVnaXN0ZXJCdXR0b25UZXh0OiBzdHJpbmc7XG4gICAgZ3Vlc3RCdXR0b25UZXh0OiBzdHJpbmc7XG4gICAgZW1haWxDb25maXJtYXRpb25UaXRsZTogc3RyaW5nO1xuICAgIGVtYWlsQ29uZmlybWF0aW9uVGV4dDogc3RyaW5nO1xuICAgIGF1dGhQcm92aWRlcjogdHlwZW9mIEF1dGhQcm92aWRlcjtcbiAgICBwYXNzd29yZFJlc2V0V2lzaGVkOiBib29sZWFuO1xuICAgIHNpZ25JbkZvcm1Hcm91cDogRm9ybUdyb3VwO1xuICAgIHNpZ25VcEZvcm1Hcm91cDogRm9ybUdyb3VwO1xuICAgIHJlc2V0UGFzc3dvcmRGb3JtR3JvdXA6IEZvcm1Hcm91cDtcbiAgICBvbkVycm9yU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG4gICAgYXV0aGVudGljYXRpb25FcnJvcjogYm9vbGVhbjtcbiAgICBwYXNzUmVzZXQ6IGJvb2xlYW47XG4gICAgZGlhbG9nUmVmOiBNYXREaWFsb2dSZWY8TGVnYWxpdHlEaWFsb2dDb21wb25lbnQ+O1xuICAgIGF1dGhQcm92aWRlcnM6IHR5cGVvZiBBdXRoUHJvdmlkZXI7XG4gICAgc2lnbkluRW1haWxGb3JtQ29udHJvbDogQWJzdHJhY3RDb250cm9sO1xuICAgIHNpZ0luUGFzc3dvcmRGb3JtQ29udHJvbDogQWJzdHJhY3RDb250cm9sO1xuICAgIHNpZ1VwTmFtZUZvcm1Db250cm9sOiBBYnN0cmFjdENvbnRyb2w7XG4gICAgc2lnVXBFbWFpbEZvcm1Db250cm9sOiBBYnN0cmFjdENvbnRyb2w7XG4gICAgc2lnVXBQYXNzd29yZEZvcm1Db250cm9sOiBBYnN0cmFjdENvbnRyb2w7XG4gICAgc2lnVXBQYXNzd29yZENvbmZpcm1hdGlvbkZvcm1Db250cm9sOiBBYnN0cmFjdENvbnRyb2w7XG4gICAgcmVzZXRQYXNzd29yZEVtYWlsRm9ybUNvbnRyb2w6IEFic3RyYWN0Q29udHJvbDtcbiAgICBjb25zdHJ1Y3RvcihwbGF0Zm9ybUlkOiBPYmplY3QsIGNvbmZpZzogTmd4QXV0aEZpcmViYXNlVUlDb25maWcsIGF1dGg6IEFuZ3VsYXJGaXJlQXV0aCwgYXV0aFByb2Nlc3M6IEF1dGhQcm9jZXNzU2VydmljZSwgZGlhbG9nOiBNYXREaWFsb2csIGFjdGl2YXRlZFJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSwgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICBnZXQgY29sb3IoKTogc3RyaW5nIHwgVGhlbWVQYWxldHRlO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBvblRhYkNoYW5nZShldmVudDogTWF0VGFiQ2hhbmdlRXZlbnQpOiB2b2lkO1xuICAgIHNpZ25PdXQoKTogUHJvbWlzZTx2b2lkPjtcbiAgICBzaWduSW4oKTogUHJvbWlzZTx2b2lkPjtcbiAgICB1cGRhdGVBdXRoU25hY2tiYXJNZXNzYWdlcygpOiB2b2lkO1xuICAgIGNyZWF0ZUZvcmdvdFBhc3N3b3JkVGFiKCk6IHZvaWQ7XG4gICAgcHJvY2Vzc0xlZ2FsU2lnblVQKGF1dGhQcm92aWRlcj86IEF1dGhQcm92aWRlcik6IHZvaWQ7XG4gICAgc2lnblVwKCk6IFByb21pc2U8dm9pZD47XG4gICAgc2lnblVwQW5vbnltb3VzbHkoKTogUHJvbWlzZTx2b2lkPjtcbiAgICByZXNldFBhc3N3b3JkKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBjaG9vc2VCYWNrVXJsO1xuICAgIHByaXZhdGUgX2luaXRTaWduSW5Gb3JtR3JvdXBCdWlsZGVyO1xuICAgIHByaXZhdGUgX2luaXRTaWduVXBGb3JtR3JvdXBCdWlsZGVyO1xuICAgIHByaXZhdGUgX2luaXRSZXNldFBhc3N3b3JkRm9ybUdyb3VwQnVpbGRlcjtcbiAgICBwcml2YXRlIF9hZnRlclNpZ25VcE1pZGRsZXdhcmU7XG59XG4iXX0=