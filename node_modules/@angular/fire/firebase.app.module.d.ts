import { InjectionToken, NgZone, Version } from '@angular/core';
import { auth, database, messaging, storage, firestore, functions } from 'firebase/app';
import * as ɵngcc0 from '@angular/core';
export declare type FirebaseOptions = {
    [key: string]: any;
};
export declare type FirebaseAppConfig = {
    [key: string]: any;
};
export declare const FirebaseOptionsToken: InjectionToken<FirebaseOptions>;
export declare const FirebaseNameOrConfigToken: InjectionToken<string | FirebaseAppConfig | undefined>;
export declare const FIREBASE_OPTIONS: InjectionToken<FirebaseOptions>;
export declare const FIREBASE_APP_NAME: InjectionToken<string | FirebaseAppConfig | undefined>;
export declare type FirebaseDatabase = database.Database;
export declare type FirebaseAuth = auth.Auth;
export declare type FirebaseAnalytics = any;
export declare type FirebaseMessaging = messaging.Messaging;
export declare type FirebasePerformance = any;
export declare type FirebaseStorage = storage.Storage;
export declare type FirebaseFirestore = firestore.Firestore;
export declare type FirebaseFunctions = functions.Functions;
export declare type FirebaseRemoteConfig = any;
export declare class FirebaseApp {
    name: string;
    options: {};
    analytics: () => FirebaseAnalytics;
    auth: () => FirebaseAuth;
    database: (databaseURL?: string) => FirebaseDatabase;
    messaging: () => FirebaseMessaging;
    performance: () => FirebasePerformance;
    storage: (storageBucket?: string) => FirebaseStorage;
    delete: () => Promise<void>;
    firestore: () => FirebaseFirestore;
    functions: (region?: string) => FirebaseFunctions;
    remoteConfig: () => FirebaseRemoteConfig;
}
export declare const VERSION: Version;
export declare function _firebaseAppFactory(options: FirebaseOptions, zone: NgZone, nameOrConfig?: string | FirebaseAppConfig | null): FirebaseApp;
export declare class AngularFireModule {
    static initializeApp(options: FirebaseOptions, nameOrConfig?: string | FirebaseAppConfig): ({
        ngModule: typeof AngularFireModule;
        providers: {
            provide: InjectionToken<string | FirebaseAppConfig | undefined>;
            useValue: string | FirebaseAppConfig | undefined;
        }[];
    })&{ngModule:AngularFireModule};
    constructor(platformId: Object);
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<AngularFireModule, never, never, never>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<AngularFireModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlyZWJhc2UuYXBwLm1vZHVsZS5kLnRzIiwic291cmNlcyI6WyJmaXJlYmFzZS5hcHAubW9kdWxlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7K0ZBb0MrRjs7Ozs7O21DQU0xRjs7OztBQUVMOyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuLCBOZ1pvbmUsIFZlcnNpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGF1dGgsIGRhdGFiYXNlLCBtZXNzYWdpbmcsIHN0b3JhZ2UsIGZpcmVzdG9yZSwgZnVuY3Rpb25zIH0gZnJvbSAnZmlyZWJhc2UvYXBwJztcbmV4cG9ydCBkZWNsYXJlIHR5cGUgRmlyZWJhc2VPcHRpb25zID0ge1xuICAgIFtrZXk6IHN0cmluZ106IGFueTtcbn07XG5leHBvcnQgZGVjbGFyZSB0eXBlIEZpcmViYXNlQXBwQ29uZmlnID0ge1xuICAgIFtrZXk6IHN0cmluZ106IGFueTtcbn07XG5leHBvcnQgZGVjbGFyZSBjb25zdCBGaXJlYmFzZU9wdGlvbnNUb2tlbjogSW5qZWN0aW9uVG9rZW48RmlyZWJhc2VPcHRpb25zPjtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IEZpcmViYXNlTmFtZU9yQ29uZmlnVG9rZW46IEluamVjdGlvblRva2VuPHN0cmluZyB8IEZpcmViYXNlQXBwQ29uZmlnIHwgdW5kZWZpbmVkPjtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IEZJUkVCQVNFX09QVElPTlM6IEluamVjdGlvblRva2VuPEZpcmViYXNlT3B0aW9ucz47XG5leHBvcnQgZGVjbGFyZSBjb25zdCBGSVJFQkFTRV9BUFBfTkFNRTogSW5qZWN0aW9uVG9rZW48c3RyaW5nIHwgRmlyZWJhc2VBcHBDb25maWcgfCB1bmRlZmluZWQ+O1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBGaXJlYmFzZURhdGFiYXNlID0gZGF0YWJhc2UuRGF0YWJhc2U7XG5leHBvcnQgZGVjbGFyZSB0eXBlIEZpcmViYXNlQXV0aCA9IGF1dGguQXV0aDtcbmV4cG9ydCBkZWNsYXJlIHR5cGUgRmlyZWJhc2VBbmFseXRpY3MgPSBhbnk7XG5leHBvcnQgZGVjbGFyZSB0eXBlIEZpcmViYXNlTWVzc2FnaW5nID0gbWVzc2FnaW5nLk1lc3NhZ2luZztcbmV4cG9ydCBkZWNsYXJlIHR5cGUgRmlyZWJhc2VQZXJmb3JtYW5jZSA9IGFueTtcbmV4cG9ydCBkZWNsYXJlIHR5cGUgRmlyZWJhc2VTdG9yYWdlID0gc3RvcmFnZS5TdG9yYWdlO1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBGaXJlYmFzZUZpcmVzdG9yZSA9IGZpcmVzdG9yZS5GaXJlc3RvcmU7XG5leHBvcnQgZGVjbGFyZSB0eXBlIEZpcmViYXNlRnVuY3Rpb25zID0gZnVuY3Rpb25zLkZ1bmN0aW9ucztcbmV4cG9ydCBkZWNsYXJlIHR5cGUgRmlyZWJhc2VSZW1vdGVDb25maWcgPSBhbnk7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBGaXJlYmFzZUFwcCB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIG9wdGlvbnM6IHt9O1xuICAgIGFuYWx5dGljczogKCkgPT4gRmlyZWJhc2VBbmFseXRpY3M7XG4gICAgYXV0aDogKCkgPT4gRmlyZWJhc2VBdXRoO1xuICAgIGRhdGFiYXNlOiAoZGF0YWJhc2VVUkw/OiBzdHJpbmcpID0+IEZpcmViYXNlRGF0YWJhc2U7XG4gICAgbWVzc2FnaW5nOiAoKSA9PiBGaXJlYmFzZU1lc3NhZ2luZztcbiAgICBwZXJmb3JtYW5jZTogKCkgPT4gRmlyZWJhc2VQZXJmb3JtYW5jZTtcbiAgICBzdG9yYWdlOiAoc3RvcmFnZUJ1Y2tldD86IHN0cmluZykgPT4gRmlyZWJhc2VTdG9yYWdlO1xuICAgIGRlbGV0ZTogKCkgPT4gUHJvbWlzZTx2b2lkPjtcbiAgICBmaXJlc3RvcmU6ICgpID0+IEZpcmViYXNlRmlyZXN0b3JlO1xuICAgIGZ1bmN0aW9uczogKHJlZ2lvbj86IHN0cmluZykgPT4gRmlyZWJhc2VGdW5jdGlvbnM7XG4gICAgcmVtb3RlQ29uZmlnOiAoKSA9PiBGaXJlYmFzZVJlbW90ZUNvbmZpZztcbn1cbmV4cG9ydCBkZWNsYXJlIGNvbnN0IFZFUlNJT046IFZlcnNpb247XG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBfZmlyZWJhc2VBcHBGYWN0b3J5KG9wdGlvbnM6IEZpcmViYXNlT3B0aW9ucywgem9uZTogTmdab25lLCBuYW1lT3JDb25maWc/OiBzdHJpbmcgfCBGaXJlYmFzZUFwcENvbmZpZyB8IG51bGwpOiBGaXJlYmFzZUFwcDtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEFuZ3VsYXJGaXJlTW9kdWxlIHtcbiAgICBzdGF0aWMgaW5pdGlhbGl6ZUFwcChvcHRpb25zOiBGaXJlYmFzZU9wdGlvbnMsIG5hbWVPckNvbmZpZz86IHN0cmluZyB8IEZpcmViYXNlQXBwQ29uZmlnKToge1xuICAgICAgICBuZ01vZHVsZTogdHlwZW9mIEFuZ3VsYXJGaXJlTW9kdWxlO1xuICAgICAgICBwcm92aWRlcnM6IHtcbiAgICAgICAgICAgIHByb3ZpZGU6IEluamVjdGlvblRva2VuPHN0cmluZyB8IEZpcmViYXNlQXBwQ29uZmlnIHwgdW5kZWZpbmVkPjtcbiAgICAgICAgICAgIHVzZVZhbHVlOiBzdHJpbmcgfCBGaXJlYmFzZUFwcENvbmZpZyB8IHVuZGVmaW5lZDtcbiAgICAgICAgfVtdO1xuICAgIH07XG4gICAgY29uc3RydWN0b3IocGxhdGZvcm1JZDogT2JqZWN0KTtcbn1cbiJdfQ==